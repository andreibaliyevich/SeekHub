"""Profiles Model

Revision ID: 904fd7adb985
Revises: 1fcc0f0ff32d
Create Date: 2025-01-27 03:32:53.627763

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "904fd7adb985"
down_revision: Union[str, None] = "1fcc0f0ff32d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "profiles",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "gender",
            sa.Enum("MALE", "FEMALE", "OTHER", name="gendertype"),
            nullable=True,
        ),
        sa.Column(
            "heading",
            sqlmodel.sql.sqltypes.AutoString(length=50),
            nullable=True,
        ),
        sa.Column("city_id", sa.Uuid(), nullable=True),
        sa.Column("height", sa.Integer(), nullable=True),
        sa.Column(
            "body_type",
            sa.Enum(
                "SLIM",
                "ATHLETIC",
                "AVERAGE",
                "CURVY",
                "FULL_FIGURE",
                "HEAVYSET",
                name="bodytype",
            ),
            nullable=True,
        ),
        sa.Column(
            "ethnicity",
            sa.Enum(
                "ASIAN",
                "BLACK",
                "LATIN",
                "EAST_INDIAN",
                "MIDDLE_EASTERN",
                "MIXED",
                "NATIVE_AMERICAN",
                "PACIFIC_ISLANDER",
                "WHITE",
                "OTHER",
                name="ethnicitytype",
            ),
            nullable=True,
        ),
        sa.Column(
            "relationship_status",
            sa.Enum(
                "SINGLE",
                "DIVORCED",
                "SEPARATED",
                "WIDOWED",
                "OPEN",
                "MARRIED",
                name="relationshipstatus",
            ),
            nullable=True,
        ),
        sa.Column("children", sa.Integer(), nullable=True),
        sa.Column(
            "drink",
            sa.Enum(
                "NON_DRINKER",
                "SOCIAL_DRINKER",
                "HEAVY_DRINKER",
                name="drinkstatus",
            ),
            nullable=True,
        ),
        sa.Column(
            "smoke",
            sa.Enum(
                "NON_SMOKER",
                "LIGHT_SMOKER",
                "HEAVY_SMOKER",
                name="smokestatus",
            ),
            nullable=True,
        ),
        sa.Column(
            "education",
            sa.Enum(
                "HIGH_SCHOOL",
                "SOME_COLLEGE",
                "ASSOCIATES_DEGREE",
                "BACHELORS_DEGREE",
                "GRADUATE_DEGREE",
                "PHD",
                "MD",
                "JD",
                name="educationlevel",
            ),
            nullable=True,
        ),
        sa.Column(
            "occupation",
            sa.Enum(
                "TECHNOLOGY",
                "HEALTHCARE",
                "EDUCATION",
                "FINANCE",
                "GOVERNMENT",
                "RETAIL",
                "HOSPITALITY",
                "CONSTRUCTION",
                "TRANSPORTATION",
                "ENTERTAINMENT",
                "OTHER",
                name="occupationtype",
            ),
            nullable=True,
        ),
        sa.Column(
            "annual_income",
            sa.Enum(
                "BELOW_20000",
                "FROM_20000_TO_50000",
                "FROM_50000_TO_100000",
                "FROM_100000_TO_200000",
                "FROM_200000_TO_500000",
                "FROM_500000_TO_1000000",
                "ABOVE_1000000",
                name="annualincomelevel",
            ),
            nullable=True,
        ),
        sa.Column(
            "net_worth",
            sa.Enum(
                "BELOW_50000",
                "FROM_50000_TO_100000",
                "FROM_100000_TO_500000",
                "FROM_500000_TO_1000000",
                "FROM_1000000_TO_5000000",
                "FROM_5000000_TO_10000000",
                "ABOVE_10000000",
                name="networthlevel",
            ),
            nullable=True,
        ),
        sa.Column(
            "about",
            sqlmodel.sql.sqltypes.AutoString(length=5000),
            nullable=True,
        ),
        sa.Column(
            "gender_preference",
            sa.Enum("MALE", "FEMALE", "OTHER", name="gendertype"),
            nullable=True,
        ),
        sa.Column("age_preference_min", sa.Integer(), nullable=True),
        sa.Column("age_preference_max", sa.Integer(), nullable=True),
        sa.Column(
            "seeking_tags",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["city_id"], ["cities.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(["id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("profiles")
    # ### end Alembic commands ###
